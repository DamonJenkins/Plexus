class Plexus extends Application {
    static = {
        mimeTypes = {},
        fileBlacklist = { ".DS_Store" },
        deviceWhitelist = {"computer", "turtle", "drive"}
    };
    history = {
        offset = 0;
        entries = {};
    };
    sorting = {
        target = false;
        reverse = false;
    };

    peripherals = {};
    location = "/";
    computerID = false;
}

function Plexus:__init__( ... )
    self.computerID = computerID
    self:super( ... )
end

--[[
    @instance
    @desc Prepares the Plexus instance to begin. Caches important nodes, information, mounts peripherals and sets up UI. Starts the application afterwards
]]
function Plexus:start()
    self.cache = {
        listing_display = self:query "#listing_container".result[ 1 ],
        name_header = self:query "Button#name_header".result[ 1 ],
        size_header = self:query "Button#size_header".result[ 1 ],
        title = self:query "Label#location".result[ 1 ],
        nav = self:query "NavigationBar".result[ 1 ]
    }

    self:sortBy "Name"
    self:updateListing()
    self.super:start()
end

--[[
    @instance
    @desc Displays the current working directory contents inside the Plexus file listing container.
          Directories are listed first, followed by files.
    @param [string - location], [boolean - preserve]
]]
function Plexus:updateListing( loc, preserve )
    local listing, pwd = self.cache.listing_display, self.location
    if not preserve then listing.nodes = {} end

    local blacklist = Plexus.static.fileBlacklist
    for i, path in pairs( fs.list( loc or self.location ) ) do
        local fullPath = fs.combine( pwd, path )
        local isDir = fs.isDir( fullPath )

        if not util.isInTable( blacklist, fullPath ) then
            local node = ( Titanium.getClass( isDir and "DirectoryListing" or "FileListing" ) )( self, fullPath ):on("trigger", function()
                if isDir then
                    self:goToDirectory( fullPath )
                else error("File: "..fullPath) end
            end)

            listing:addNode( node:set{ Y = i } )
        end
    end

    self:sortListing()
    listing.yScroll = 0

    self.cache.nav:updateSectionListing()
    self:alignSizeInformation()
    self:updateTitle()

    self.changed = true
end

function Plexus:sortListing()
    local sorting, listing = self.sorting, self.cache.listing_display
    table.sort( listing.nodes, function( a, b )
        local main = not sorting.reverse and a or b
        local sub = main == a and b or a

        if main.__type == sub.__type then
            if sorting.target == "Name" or not main.cache.size then
                return main.fileName:lower() < sub.fileName:lower()
            elseif sorting.target == "Size" then
                return main.cache.size < sub.cache.size
            end
        else
            if sorting.target == "Size" then
                return not sorting.reverse and main.__type == "FileListing"
            else
                return main.__type == "DirectoryListing"
            end
        end
    end )

    for i = 1, #listing.nodes do listing.nodes[ i ].Y = i end
end

function Plexus:sortBy( target )
    local sorting = self.sorting
    if sorting.target == target then
        sorting.reverse = not sorting.reverse
    else
        sorting.target = target
        sorting.reverse = false
    end

    self.cache[ sorting.target == "Name" and "name_header" or "size_header" ].text = sorting.target .. " " .. ( sorting.reverse and "\31" or "\30" )
    self.cache[ sorting.target == "Name" and "size_header" or "name_header" ].text = sorting.target == "Name" and "Size" or "Name" .. " "

    self:sortListing()
end

--[[
    @instance
    @desc Finds the maximum file name in the listing. This acts as the columns width and is used to position the size column.
]]
function Plexus:alignSizeInformation()
    local nameWidth = math.max( util.getMaxLength( self.cache.listing_display.nodes, "fileName" ) + 4, 30 )

    self.margin = nameWidth
    self.cache.size_header.X = nameWidth
end

function Plexus:updateTitle( title )
    self.cache.title.text = "- /" .. util.truncateString( title or self.location, 30 )
end

--[[
    @instance
    @desc Navigate through the Plexus instance history
    @param <number - direction>

    Note: If number (direction) is positive, attempts will be made to move forward through the history. If number is negative, the opposite holds true.
]]
function Plexus:historyNavigate( offset )
    local hOffset, offset = self.history.offset, offset or 0

    if offset > 0 and hOffset == 0 then
        return error "Attempt to navigate forward past history end point"
    elseif offset < 0 and hOffset == #self.history.entries then
        return error "Attempt to navigate backward past history start point"
    else
        self.history.offset = hOffset + offset
    end
end

--[[
    @instance
    @desc Used to change the Plexus instance location, and update the listing
    @param <string - path>
]]
function Plexus:goToDirectory( path )
    self.location = path
    self:updateListing()
end

--[[
    @instance
    @desc Navigates to the parent directory of the current location if one exists.
]]
function Plexus:navigateUp()
    local target = Plexus.static.cleanPath( self.location:match "(.*[^/]+)/[^/]*$" or "" )

    if target == self.location then return end
    self:goToDirectory( target )
end

--[[
    @setter
    @desc Sets the instances location to a clean version of the path
    @param <string - pwd>
]]
function Plexus:setLocation( pwd )
    self.location = Plexus.static.cleanPath( pwd )
end

--[[
    @instance
    @desc Adds currently connected, whitelisted devices to the peripherals table.
]]
function Plexus:discoverPeripherals()
    local whitelist = Plexus.static.deviceWhitelist

    self.peripherals = {}
    for i = 1, #whitelist do
        local peripherals = { peripheral.find( whitelist[ i ] ) }
        for i = 1, #peripherals do
            table.insert( self.peripherals, peripherals[ i ] )
        end
    end
end

--[[
    @static
    @desc Cleans a file system path by removing anomolies that will likely cause problems when using the filesystem commands
    @param <string - path>
    @return <string - path>
]]
function Plexus.static.cleanPath( path )
    return path
            :gsub("^%./", "") -- Remove trailing ./
            :gsub("/%./", "/") -- Replace ./ inside path with /
            :gsub("\\", "/") -- Replace \ with /
            :gsub("//+", "/") -- Remove duplicate slashes
            :gsub("/+$", "") -- Remove trailing slashes
            :gsub("^/", "") -- Remove leading slashes
end

--[[
    @static
    @desc 'Explode' the path provided into 'parts' that represent directories
    @param <string - uncleanPath>
    @return <table - parts>, <string - cleanPath>
]]
function Plexus.static.splitPath( path )
    local parts, path = {}, Plexus.static.cleanPath( path )
    for part in path:gmatch "([^/]+)/?" do
        parts[ #parts + 1 ] = part
    end

    return parts, path
end

function Plexus.static.splitPathAbsolute( path )
    local parts, path = {}, Plexus.static.cleanPath( path )
    while path:len() > 0 do
        parts[ #parts + 1 ] = path
        path = path:gsub( "/?[^/]-$", "" )
    end

    return parts, path
end

--[[
    @static
    @desc Returns the final part of the extension for 'path'
    @param <string - cleanPath>
    @return <string - extension>
]]
function Plexus.static.getExtension( path )
    return path:match ".+%.(.-)$" or ""
end

--[[
    @static
    @desc Registers mime type 'mime', with the extensions provided. Previous extensions bound to mime type are preserved
    @param <string - mime>, [string (vararg) - extensions]

    Note: 'extensions' represents the file extensions to associate with this mime type
]]
function Plexus.static.registerMime( mime, ... )
    local extensions, existing, ext = { ... }, Plexus.mimeTypes[ mime ] or {}
    for i = 1, #extensions do
        ext = extensions[ i ]
        if not util.isInTable( existing, ext ) then
            existing[ #existing + 1 ] = ext
        end
    end

    Plexus.mimeTypes[ mime ] = existing
end

--[[
    @static
    @desc Returns the mime type associated with the extension of 'path'.
    @param <string - path>
    @return [string - mime]
]]
function Plexus.static.determineMime( path )
    local ext, mimes = Plexus.static.getExtension( path ), Plexus.mimeTypes
    for mime, exts in pairs( mimes ) do
        for e = 1, #exts do
            if exts[ e ] == ext then
                return mime
            end
        end
    end
end

--[[
    @static
    @desc Adds the input device type to the deviceWhitelist table.
    @param <string - device>
]]
function Plexus.static.whitelistDevice( device )
    if type( device ) == "string" then
        table.insert( Plexus.static.deviceWhitelist, device )
    else
        return error "Failed to whitelist peripheral. Invalid peripheral type provided"
    end
end

configureConstructor {
    orderedArguments = {"location"},
    requiredArguments = {"location"},
    useProxy = {"location"},
    argumentTypes = {
        location = "string"
    }
}
