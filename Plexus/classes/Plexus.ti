class Plexus {
    static = {
        mimeTypes = {}
    };

    history = {
        offset = 0;
        entries = {};
    };

    location = "/";
    computerID = false;
}

function Plexus:__init__( pwd )
    self.computerID = computerID
    self.location = Plexus.static.cleanPath( pwd )
end

--[[
    @instance
    @desc Navigate through the Plexus instance history
    @param <number - direction>

    Note: If number (direction) is positive, attempts will be made to move forward through the history. If number is negative, the opposite holds true.
]]
function Plexus:historyNavigate( offset )
    local hOffset, offset = self.history.offset, offset or 0

    if offset > 0 and hOffset == 0 then
        return error "Attempt to navigate forward past history end point"
    elseif offset < 0 and hOffset == #self.history.entries then
        return error "Attempt to navigate backward past history start point"
    else
        self.history.offset = hOffset + offset
    end
end


--[[
    @static
    @desc Cleans a file system path by removing anomolies that will likely cause problems when using the filesystem commands
    @param <string - path>
    @return <string - path>
]]
function Plexus.static.cleanPath( path )
    return path
            :gsub("^%./", "") -- Remove trailing ./
            :gsub("/%./", "/") -- Replace ./ inside path with /
            :gsub("\\", "/") -- Replace \ with /
            :gsub("//+", "/") -- Remove duplicate slashes
            :gsub("/+$", "") -- Remove trailing slashes
end

--[[
    @static
    @desc 'Explode' the path provided into 'parts' that represent directories
    @param <string - uncleanPath>
    @return <table - parts>, <string - cleanPath>
]]
function Plexus.static.splitPath( path )
    local parts, path = {}, Plexus.static.cleanPath( path )
    for part in path:gmatch "(%w+)/?" do
        parts[ #parts + 1 ] = part
    end

    return parts, path
end

function Plexus.static.explore( path )

end

function Plexus.static.getAction( mime )

end
